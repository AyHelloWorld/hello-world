
更详细的neo4j查询语句可见： 
https://neo4j.com/docs/developer-manual/3.2/cypher/syntax/
http://neo4j.com/docs/2.2.0/query-functions-scalar.html
https://www.w3cschool.cn/neo4j/neo4j_cql_merge.html

创建测试数据：
浏览器打开：http://localhost:7474/browser/
输入：`:play movie graph`
或`:play northwind-graph`即可获取数据；

LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/products.csv" AS row
CREATE (n:Product)
SET n = row,
  n.unitPrice = toFloat(row.unitPrice),
  n.unitsInStock = toInteger(row.unitsInStock), n.unitsOnOrder = toInteger(row.unitsOnOrder),
  n.reorderLevel = toInteger(row.reorderLevel), n.discontinued = (row.discontinued <> "0")
LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/categories.csv" AS row
CREATE (n:Category)
SET n = row
LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/suppliers.csv" AS row
CREATE (n:Supplier)
SET n = row
Create indexes


 neo4j数据库简单除暴理解的概念：

Neo4j中不存在表的概念，只有两类：节点(Node)和关联(Relation)，可以简单理解为图里面的点和边。
在数据查询中，节点一般用小括号()，关联用中括号[]。
当然也隐含路径的概念，是用节点和关联表示的，如：(a)-[r]->(b)，表示一条从节点a经关联r到节点b的路径。
 备份Neo4j的数据:

1)停掉数据库.
2)备份D:\Neo4J\neo4j-enterprise-1.9.1\data目录下graph.db目录中的所有内容.
3)在服务器上拷贝graph.db目录中的内容到新的服务器的相同目录中,启动即可.

Cypher的基本操作
查询语言包含
START：在图中的开始点，通过元素的ID或所以查找获得。
MATCH：图形的匹配模式，束缚于开始点。
WHERE：过滤条件。
RETURN：返回所需要的。

py2neo支持的语法关键词：
expected whitespace, '.', node labels, '[', "=~", IN, STARTS, ENDS, CONTAINS, IS, '^', '*', '/', '%', '+', '-', '=', "<>", "!=", '<', '>', "<=", ">=", AND, XOR, OR, LOAD CSV, START, MATCH, UNWIND, MERGE, CREATE, SET, DELETE, REMOVE, FOREACH, WITH, CALL, RETURN, UNION, ';' or end 

1）创建节点

            create (a) 创建空节点
            create (a:Person) 创建标签（可以理解为类）为Person的节点
            create (a:Person {name:‘Kaine‘,age:28}) 创建标签为Person，属性name值为Kaine，属性age值为28的节点

创建一个标签的节点：
CREATE (ee:Person { name: "Emil", from: "Sweden", klout: 99 })

创建多个标签（这里是`Person`、`Kaa`）的节点：
CREATE (ee:Person :Kaa { name: "Emil", from: "Sweden", klout: 199 })

使用约束： title被唯一化约束
CREATE CONSTRAINT ON (movie:Movie) ASSERT movie.title IS UNIQUE

删除某个标签（这里是删除`Kaa`）：
MATCH(m:Person) WHERE m.klout = 199 REMOVE m:Kaa RETURN m

重命名某个节点的标签：
MATCH (n:Person) where n.klout = 199 SET  n:NewLabel  REMOVE n:Person RETURN n

 2）创建关联

            match (a),(b)
            where a.name=‘Kaine‘ and b.name=‘Sharon‘
            create (a)-[r]->(b) 创建a节点和b节点的路径，此时变量r即代表关联，它也可以有标签

            # 将match和create进行合并使用。将匹配到的节点连接到一个新的节点上。
            match (p:Shuxing {name:"共享wifi最大连接数"}) create (m:Shuxing {name:"5个",alias:"5个",Name:"5个"}) create (p)-[r:next]->(m) return p,r,m;
            match (p:Person {name:"Christopher Guest"}) create (m:School {name:"DEJY",address:"deyang"}) create (p)-[r:ACTED_IN {roles:["studeng"]}]->(m) return p,r,m;

3）查询关键字

        match：用来匹配一定模式，可以是简单的节点、关联，也可以是复杂的路径
        where：用来限定条件，一般是限定match中的出现变量的属性
        return：返回结果
        start：开始节点，一般用于有索引的节点或者关联


        match ... where ... return ...
        如果match有多个对象，用逗号隔开；
        如果where有多个条件，用and连接；
        如果return有多个变量，用逗号隔开


 4）查询举例讲解

        match (n) return n
                       查询所有节点及关联
        match (a)-[r]->(b) where a.name=‘Kaine‘ return a,b
                       查询属性name的值是Kaine的节点，及其所有关联节点
        match (a)-[*1..3]->(b) where a.name=‘Kaine‘ return a,b
                       查询属性name值是Kaine的节点，及其所有距离为1到3的关联节点，
        match (a)-[*2]->(b) where a.name=‘Kaine‘ and not (a)-[*1]->(b) return a,b
                       查询属性name的值是Kaine的节点，及其所有距离为2并且去除距离为1的节点。
                      （在计算好友的好友时会用到，即如果a、b、c三个人都认识，如果仅计算跟a距离为2的人的时候会把b、c也算上，因为a->b->c，或者a->c->b都是通路）

        MATCH (s) WHERE ID(s) = 143 RETURN s  # 根据id查询实体；
        MATCH (v0 : Entity{ name: "系列1"})    RETURN ID(v0)  # 根据实体查询其id
        MATCH p=()-[r:`答案列表`]->() RETURN ID(r)  # 获取`答案列表`这个属性的id；
        
        MATCH (x:Shuxing)-[r]-() RETURN endNode(r)  # 查询所有的叶子节点
        MATCH (a) WHERE ANY (x IN a.alias WHERE x = "价格") RETURN a  # 在列表中查询，若有一个满足及查询成功
        
        MATCH (a) WHERE a.name='Eskil' RETURN a.array, filter(x IN a.array WHERE length(x)= 3)  # 在搜索结果的基础上继续过滤；
       
        match (n) where not (n)-->() return distinct n  # 查找所有的叶子节点

        MATCH (person:Person{name: "张三"}) SET person.ths = CASE person.salary WHEN 'Teacher' THEN 50000 WHEN 'Assistant' THEN 40000 WHEN 85 THEN 'abc' ELSE 'asd' END RETURN person # 选择性赋值

        MATCH p=(n)-[*]->(n1) where n1.name="亚洲"and n.name="支持地区" RETURN length(p)  # 查询两个节点间的路径长度；
 
        注：关联的中括号内数字的含义
            n 距离为n
            ..n 最大距离为n
            n.. 最小距离为n
            m..n 距离在m到n之间

# 属性值为空时查询示例：
MATCH (n)-[r1:`疾病`]->(n1),(n)-[r2:`赔偿规则`]->(n2),(n)-[r3:`相关条款`]->(n3) WHERE n.name='赔偿情况1'and n1.name = "恶性肿瘤" and r2.等待期 = "是" and r2.意外导致 is null and r2.首次发生 is null RETURN n2.name ,n3.name , r2.name,n.name

a.创建

CREATE (id:label {key:value})
id:     为节点添加一个唯一ID，不设置则系统自动设置一个，不设置时是 CREATE (:label...
label:  标签，生命节点类型
{}:     属性定义，key/value格式

merge在查找时，如果找到则返回，如果没找到则创建。可以避免创建重复的节点
merge (m:School {name:"SCDX"})
on create set m.address="chegndu"
return m;

MATCH (m:School { name:"CDLG" })
MATCH (p:Person { name:"jiaj" })
MERGE (p)-[r:ACTED_IN]->(m)
ON CREATE SET r.roles =['teacher']
RETURN p,r,m ;

MERGE (keanu:Person { name: 'Keanu Reeves' })
ON CREATE SET keanu.created = timestamp()
RETURN keanu.name, keanu.created

MERGE (person:Person)
ON MATCH SET person.found = TRUE RETURN person.name, person.found

MERGE (keanu:Person { name: 'Keanu Reeves' })
ON CREATE SET keanu.created = timestamp()
ON MATCH SET keanu.lastSeen = timestamp()
RETURN keanu.name, keanu.created, keanu.lastSeen

MERGE (person:Person)
ON MATCH SET person.found = TRUE , person.lastAccessed = timestamp()
RETURN person.name, person.found, person.lastAccessed

MATCH (charlie:Person { name: 'Charlie Sheen' }),(wallStreet:Movie { title: 'Wall Street' })
MERGE (charlie)-[r:ACTED_IN]->(wallStreet)
RETURN charlie.name, type(r), wallStreet.title

match (circle:Circle {id:3, cycleId:5})
match (member1:Member {id:1})
match (member2:Member {id:2})
create (invite:Invite {time:timestamp()})-[:TO_CIRCLE]->(circle)
create (invite)-[:INVITED_BY]->(member1)
create (invite)-[:INVITED]->(member2)
return member1, member2, invite, circle;

MATCH (u:user {id : "10662"})-[r:has_profile]->(p:profile), (u2:user)-[r2:has_profile]->(p2:profile)
WHERE
  p.user_id <> p2.user_id AND
  abs(u2.date_birth - u.date_birth) >= 94608000000
RETURN collect(u2.id) as id;

# 多个子句查询：
MATCH (g:Gene),(c:Chromosome)
WHERE g.chromosomeID = c.chromosomeID
CREATE (g)-[:PART_OF]->(c);

＃上子句查询计算量大，可以改成下面这样：
MATCH (c:Chromosome)
WITH c
MATCH (g:Gene)
WHERE g.chromosomeID = c.chromosomeID
CREATE (g)-[:PART_OF]->(c);

# 时间查询处理：
START n = node(0)
MATCH (n)-[:WISH]->(m)
return 1970 + round(m.creationDate / (365.242 * 24 * 3600)), count(m)

MATCH (n)-[:WISH]->(m)
WHERE m.creationDate > '1325376000' AND m.creationDate < '1356998399'
return count(m) as total, '2012' as year

# 创建一个时间节点
CREATE (n:Post {created_at: TIMESTAMP()}) return n

<id>:5346created_at: 1505354974256
时间单位是毫秒，等同于python内：time.time()*1000

＃　安装时间进行排序
MATCH (a:Post) RETURN a ORDER BY a.created_at LIMIT 10

＃ 更多时间处理示例：
MATCH (m25:user)-[:gender]->(male:gender {type:"male"})
where  tofloat(m25.birthday) < (timestamp()-788923800000)
RETURN count(m25)
UNION
MATCH (f25:user)-[:gender]->(female:gender {type:"female"})
where  tofloat(f25.birthday) < (timestamp()-788923800000)
RETURN count(f25)
UNION
...
...or...

MATCH (m25:user)-[:gender]->(male:gender {type:"male"})
where  tofloat(m25.birthday) < (timestamp()-788923800000)
WITH count(m25) AS male25
MATCH (f25:user)-[:gender]->(male:gender {type:"female"})
where  tofloat(f25.birthday) < (timestamp()-788923800000)
WITH count(f25) AS female25, male25

在Neo4j Browser中使用参数
Neo4j Browser是Neo4j内置的浏览器，用于管理数据库，更新数据库和查询数据，再命令窗体中，通过“:”能够引用内置的命令，例如，通过 ":param"能够定义参数，并能够在下一个Cypher语句中引用参数。
1，通过:param命令定义参数
在Neo4j Browser中，输入第一个命令，通过:param 命令定义参数，如下：
:param events:[{year:2014,id:1},{year:2014,id:2}]

2，通过$param引用参数
紧接着，输入Cypher语句，通过$param引用参数，如下：
unwind $events as event
merge (y:Year {year:event.year})
merge(y)<-[:IN]-(e:Event{id:event.id})
RETURN e.id AS x
order by x

b.关系

-[role:label {roles: ["Neo"]}]->
--  表示一个无指向的关系
--> 表示一个有指向的关系
[] 能够添加ID，属性，类型等信息
 另看：http://blog.csdn.net/wangweislk/article/details/47661863



按id查询(这里的id是系统自动创建的)：
start n=node(20) return m;

查询所有节点：
start n=node(*) return n;
查询属性，关系：
start n=node(9) return n,n.name,n.ID,n.level; //查看指定节点，返回需要的属性

start n=node(*) match (n)-[r:SubClassOf]->m return m,n,n.name,n.ID,r; //查找指定关系

按关系查询多个节点：
start a = node(14) match b-[r]<->a return r,b;

start a = node(0) match c-[:KNOWS]->b-[:KNOWS]->a return a,b,c; //查找两层KNOWS关系的节点

start a = node(21) match b-[*]->a return a,b;  //查找所有与a节点有关系的节点

使用Where条件进行查询：（不用建立Index也可以使用）
start n=node(*) where n.name="Activity" return n;
并且可以使用特定符号：
start n=node(*) where n.ID?="A*" return n;
start n=node(*) where HAS(n.type) return n,n.name,n.ID,n.type; //如果存在属性type，并且以A开头，就输出节点。

配置文件自动建立索引：
修改conf目录下的neo4j.properties文件内容如下，重启Neo4J，对重启后新建的Node生效。
# Enable auto-indexing for nodes, default is false
node_auto_indexing=true

# The node property keys to be auto-indexed, if enabled
node_keys_indexable=name,ID
# Enable auto-indexing for relationships, default is false
relationship_auto_indexing=true

# The relationship property keys to be auto-indexed, if enabled
relationship_keys_indexable=KNOWS,SubClassOf

建立索引后可以用node_auto_index按属性值查询：
start n=node:node_auto_index(name="C") return n,n.name;

修改属性值：
start a = node(*) where a.name="a" set a.name="A" return a,a.name ;
start n=node(0) set n.name="Root",n.ID="001" ; //给默认的根节点添加name,ID属性，便于查询。

删除：
删除所有节点和关系：
START n=node(*)
match n-[r]-()
delete n,r;

删除所有节点以上方法过时，后面版本将被遗弃-推荐使用如下方法
MATCH (n)
OPTIONAL MATCH (n)-[r]-()
DELETE n,r

插入节点。插入一个Person类别的节点，且这个节点有一个属性name，属性值为Andres
CREATE (n:Person { name : 'Andres'});
插入边。插入一条a到b的有向边，且边的类别为Follow
MATCH (a:Person),(b:Person)
WHERE a.name = 'Node A' AND b.name = 'Node B'
CREATE (a)-[r:Follow]->(b);
更新节点。更新一个Person类别的节点，设置新的name。
MATCH (n:Person { name: 'Andres' })
SET n.name = 'Taylor';
删除节点和与其相连的边。Neo4j中如果一个节点有边相连，是不能单单删除这个节点的。
MATCH (n:Person { name:'Andres' })
DETACH DELETE n;
删除边。
MATCH (a:Person)-[r:Follow]->(b:Person)
WHERE a.name = 'Andres' AND b.name = 'Taylor'
DELETE r;
接着就是查询语句了，作为图形数据库，肯定要来点与众不同的查询对吧。

最短路径。
MATCH (ms:Person { name:'Andres' }),(cs:Person { name:'Taylor' }), p = shortestPath((ms)-[r:Follow]-(cs)) RETURN p;
查询两个节点之间的关系。
MATCH (a:Person { name:'Andres' })-[r]->(b:Person { name:'Taylor' })
RETURN type(r);
查询一个节点的所有Follower。
MATCH (:Person { name:'Taylor' })-[r:Follow]->(Person)
RETURN Person.name;
还有更多的操作可以参考官方用户手册：官方用户手册

2.3 创建一个Neo4j数据库

运行Neo4j之后，在软件窗口可以选择数据库创建位置，之后Neo4j就自动为我们创建好了数据库。

创建唯一性约束，同时具有索引效果，类似关系型数据库中的主键。注意，这只能在数据库中还未插入数据时设置。
CREATE CONSTRAINT ON (a:Person) ASSERT a.name IS UNIQUE;
创建索引。
CREATE INDEX ON :Person(name);
查看所有的节点数和边数
MATCH (n) RETURN count(n);
MATCH ()-->() RETURN count(*);

插入节点。插入一个Person类别的节点，且这个节点有一个属性name，属性值为Andres
CREATE (n:Person { name : 'Andres'});
插入边。插入一条a到b的有向边，且边的类别为Follow
MATCH (a:Person),(b:Person)
WHERE a.name = 'Node A' AND b.name = 'Node B'
CREATE (a)-[r:Follow]->(b);
更新节点。更新一个Person类别的节点，设置新的name。
MATCH (n:Person { name: 'Andres' })
SET n.name = 'Taylor';
删除节点和与其相连的边。Neo4j中如果一个节点有边相连，是不能单单删除这个节点的。
MATCH (n:Person { name:'Andres' })
DETACH DELETE n;
删除边。
MATCH (a:Person)-[r:Follow]->(b:Person)
WHERE a.name = 'Andres' AND b.name = 'Taylor'
DELETE r;
接着就是查询语句了，作为图形数据库，肯定要来点与众不同的查询对吧。

最短路径。
MATCH (ms:Person { name:'Andres' }),(cs:Person { name:'Taylor' }), p = shortestPath((ms)-[r:Follow]-(cs)) RETURN p;
查询两个节点之间的关系。
MATCH (a:Person { name:'Andres' })-[r]->(b:Person { name:'Taylor' })
RETURN type(r);
查询一个节点的所有Follower。
MATCH (:Person { name:'Taylor' })-[r:Follow]->(Person)
RETURN Person.name;

常用聚合： count, sum, avg, min, max，count(DISTINCT role)，NULL值自动跳过
MATCH (:Person) RETURN count(*) AS people

排序用法：ORDER BY person.age
分页用法：SKIP {offset} LIMIT {count}
MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
RETURN a,count(*) AS appearances
ORDER BY appearances DESC LIMIT 10;

聚集聚合
MATCH (m:Movie)<-[:ACTED_IN]-(a:Person)
RETURN m.title AS movie, collect(a.name) AS cast, count(*) AS actors

编写大型语句
# 要组合具有相同结果结构的两个语句的结果，可以使用UNION [ALL]。
若要查找演员和导演，而不使用同时查找两种关系`()-[:ACTED_IN|:DIRECTED]->()`，则可以使用：
MATCH (actor:Person)-[r:ACTED_IN]->(movie:Movie)
RETURN actor.name AS name, type(r) AS acted_in, movie.title AS title
UNION
MATCH (director:Person)-[r:DIRECTED]->(movie:Movie)
RETURN director.name AS name, type(r) AS acted_in, movie.title AS title

# 在Cypher中，可以将一段语句链接在一起，就像在数据流管道中一样。 每个片段都可以从上一个片段中输出，其结果可以进入下一个片段。
您可以使用WITH子句组合各个部分，并声明哪些数据从一个流到另一个。 WITH非常像RETURN，区别在于它不完成查询，但准备下一个部分的输入。 您可以使用与RETURN子句中相同的表达式，聚合，排序和分页。
唯一的区别是你必须别名所有列，否则它们将不可访问。 您在WITH子句中声明的列只能在后续查询部分中使用。
看下面的例子，我们收集一些有人出现的电影，然后过滤掉只出现在一部电影中的电影。
MATCH (person:Person)-[:ACTED_IN]->(m:Movie)
WITH person, count(*) AS appearances, collect(m.title) AS movies
WHERE appearances > 1
RETURN person.name, appearances, movies

# http://neo4j.com/docs/2.2.0/query-functions-scalar.html
13.1. Predicates
ALL
ANY
NONE
SINGLE
EXISTS

13.2. Scalar functions
LENGTH
LENGTH of pattern expression
TYPE
ID
COALESCE
HEAD
LAST
TIMESTAMP
STARTNODE
ENDNODE
TOINT
TOFLOAT
TOSTRING

13.3. Collection functions
NODES
RELATIONSHIPS
LABELS
KEYS
EXTRACT
FILTER
TAIL
RANGE
REDUCE

13.4. Mathematical functions
ABS
ACOS
ASIN
ATAN
ATAN2
COS
COT
DEGREES
E
EXP
FLOOR
HAVERSIN
LOG
LOG10
PI
RADIANS
RAND
ROUND
SIGN
SIN
SQRT
TAN

13.5. String functions
STR
REPLACE
SUBSTRING
LEFT
RIGHT
LTRIM
RTRIM
TRIM
LOWER
UPPER
SPLIT

