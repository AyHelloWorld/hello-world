
Step 1 查看哪些历史提交过文件占用空间较大
　　使用以下命令可以查看占用空间最多的五个文件：
　　git rev-list --objects --all | grep "$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -5 | awk '{print$1}')"
　　rev-list命令用来列出Git仓库中的提交，我们用它来列出所有提交中涉及的文件名及其ID。 该命令可以指定只显示某个引用（或分支）的上下游的提交。
　　--objects：列出该提交涉及的所有文件ID。
　　--all：所有分支的提交，相当于指定了位于/refs下的所有引用。
　　verify-pack命令用于显示已打包的内容。

step 2. 重写commit，删除大文件
　　使用以下命令，删除历史提交过的大文件：
　　git filter-branch --force --index-filter 'git rm -rf --cached --ignore-unmatch big-file.jar' --prune-empty --tag-name-filter cat -- --all
　　上面脚本中的big-file.jar请换成你第一步查出的大文件名，或者这里直接写一个目录。
　　filter-branch命令可以用来重写Git仓库中的提交
　　--index-filter参数用来指定一条Bash命令，然后Git会检出（checkout）所有的提交， 执行该命令，然后重新提交。
　　--all参数表示我们需要重写所有分支（或引用）。
　　在重写提交的过程中，会有以下日志输出:
　　Rewrite 6cdbb293d453ced07e6a07e0aa6e580e6a5538f4 (266/266)# Ref 'refs/heads/master' was rewritten
　　如果显示 xxxxx unchanged, 说明repo里没有找到该文件, 请检查路径和文件名是否正确，重复上面的脚本，把所有你想删除的文件都删掉。

step 3. 推送修改后的repo
　　以强制覆盖的方式推送你的repo, 命令如下:
　　git push origin master --force
    
    如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做git pull合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用--force选项。
    $ git push --force origin 
    上面命令使用--force选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用--force选项。

step 4. 清理和回收空间
　　虽然上面我们已经删除了文件, 但是我们的repo里面仍然保留了这些objects, 等待垃圾回收(GC), 所以我们要用命令彻底清除它, 并收回空间，命令如下:

$ rm -rf .git/refs/original/
$ git reflog expire --expire=now --all
$ git gc --prune=now
$ git gc --aggressive --prune=now

step 5. push优化后的代码到远处仓库

$ git push origin --force --all
$ git push origin --force --tags

step 6.修改保护
如下报错：remote: GitLab: You are not allowed to force push code to a protected branch on this project.。原来是gitlab默认给master分支加了保护，不允许强制覆盖。于是去gitlab下点击project->Branches->project settings，打开页面：http://192.168.3.101/gswyhq/项目名称_demo/protected_branches ; 将下方受保护的master 中的Allowed to push 由‘Masters’改为‘No one’，再点击‘Unprotect’,即可把master的保护去掉就可以了。修改完，强制push之后，建议把master的保护再加回来，毕竟强推不是件好事。
改回方法：同样在页面http://192.168.3.101/gswyhq/项目名称_demo/protected_branches；Branch，选择master; Allowed to merge,选择Masters;Allowed to push,选择Masters.即可改回受保护。

当你已经把项目工程的大小缩减到满意的地步，还要注意一点，在gitlab（不是github）上，就算强制push到远程仓库里，容量只会叠加不会更替，所以只能先把gitlab上的工程删掉，重建工程，再push上去。

进入项目页面
setting
最下面（Show it to me）点击一下，最下面会显示隐藏内容
显示的红色区域最下面有按钮：Remove project
点击就删除了。

# 删除所有提交历史记录，成为一个干净的新仓库
第一步：新建一个空白分支
gswyhq@gswyhq-pc:~/hello-world$ git checkout --orphan latest_branch
切换到一个新分支 'latest_branch'
第二步：向空白分支添加文件
gswyhq@gswyhq-pc:~/hello-world$ git add .
第三步：提交
gswyhq@gswyhq-pc:~/hello-world$ git commit -m "记录信息"
第四步：强制删除旧分支
gswyhq@gswyhq-pc:~/hello-world$ git branch -D master
第五步：将当前分值重命名为master分支
gswyhq@gswyhq-pc:~/hello-world$ git branch -m master
第六步：将本地强制推送到远程
gswyhq@gswyhq-pc:~/hello-world$ git push -f origin master

