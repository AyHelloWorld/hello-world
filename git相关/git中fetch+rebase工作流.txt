

用fetch+rebase (相比pull+merge工作流更干净，不容易出错)
比如dev是你的本地开发分支, 要把本地dev分支合并到origin/master
git checkout dev  # 本地切到dev分支
做了些事情（一个bug，一个功能什么的）
... # 改动.. commit.. 测试...
git fetch origin master     # 更新远程master分支到本地远程master分支.
git rebase origin/master # 将你的commits移到origin/master的末尾
git push origin dev # 推送dev分支到远程

# 解决冲突
在rebase的过程中，也许会出现冲突(conflict). 在这种情况，Git会停止rebase并会让你去解决 冲突；在解决完冲突后，用"git-add"命令去更新这些内容的索引(index), 然后，你无需执行 git-commit,只要执行:
$ git rebase --continue
这样git会继续应用(apply)余下的补丁。
在任何时候，你可以用--abort参数来终止rebase的行动，并且当前处理的分支会回到rebase开始前的状态。
$ git rebase --abort

切换到master分支，然后运行下面的命令：
   git rebase test
这个时候，git做了些什么呢？
先将test分支的代码checkout出来，作为工作目录
然后将master分支从test分支创建起的所有改变的补丁，依次打上。如果打补丁的过程没问题，rebase就搞定了
如果打补丁的时候出现了问题，就会提示你处理冲突。处理好了，可以运行git rebase –continue继续直到完成
如果你不想处理，你还是有两个选择，一个是放弃rebase过程（运行git rebase –abort），另一个是直接用test分支的取代当前分支的（git rebase –skip）。

# 变更基线
# 注： 若是工作区中存在尚未提交到仓库的变更，请不要使用变更基线。
变更基线一个非常有用的特殊用法 git pull –rebase。
举个例子，假设你正在master分支的一个本地版本上工作，你已经向仓库提交了一小部分变更。与此同时，也有人向master分支提交了他一周的工作成果。
当你尝试推送本地变更时，git提示你需要先运行一下 git pull ， 来解决冲突。作为一个称职的工程师，你运行了一下 git pull ，并且git自动生成了如下的提交信息。
Merge remote-tracking branch ‘origin/master’
尽管这不是什么大问题，也完全安全，但是不太有利于历史记录的聚合。
这种情况下，git pull --rebase 是一个不错的选择。
这个命令会迫使git将远程分支上的变更同步到本地，然后将尚未推送的提交重新应用到这个最新版本，就好象它们刚刚发生一样。这样就可以避免合并以及随之而来的丑陋的合并信息了。
