

用fetch+rebase (相比pull+merge工作流更干净，不容易出错)
比如dev是你的公共开发分支
git checkout dev  # 本地切到公共分支
git pull              # 将本地的dev更新
git checkout -b bug_101026  # 新建一个主题分支（一个bug，一个功能什么的）
... # 改动.. commit.. 测试...
git fetch origin      # 更新upstream
git rebase origin/dev  # 将你的commits移到的末尾
git checkout dev  # 切换到公共分支
git pull              # 更新公共分支
git rebase bug_101026  # 将你的主题分支加到公共分支的末尾
git push               # 推送

# 解决冲突
在rebase的过程中，也许会出现冲突(conflict). 在这种情况，Git会停止rebase并会让你去解决 冲突；在解决完冲突后，用"git-add"命令去更新这些内容的索引(index), 然后，你无需执行 git-commit,只要执行:
$ git rebase --continue
这样git会继续应用(apply)余下的补丁。
在任何时候，你可以用--abort参数来终止rebase的行动，并且当前处理的分支会回到rebase开始前的状态。
$ git rebase --abort

切换到master分支，然后运行下面的命令：
   git rebase test
这个时候，git做了些什么呢？
先将test分支的代码checkout出来，作为工作目录
然后将master分支从test分支创建起的所有改变的补丁，依次打上。如果打补丁的过程没问题，rebase就搞定了
如果打补丁的时候出现了问题，就会提示你处理冲突。处理好了，可以运行git rebase –continue继续直到完成
如果你不想处理，你还是有两个选择，一个是放弃rebase过程（运行git rebase –abort），另一个是直接用test分支的取代当前分支的（git rebase –skip）。

