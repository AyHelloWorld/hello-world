

# 本地代码回滚，回退
git reset --hard 2fc27b236ef82f0fb1951147cebe0ebe6a760811 # 回退到“2fc27b236ef82f0fb1951147cebe0ebe6a760811”，并且之后commit的代码都丢失

git revert commit （比如：fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff）撤销指定的版本，撤销也会作为一次提交进行保存。

# revert 撤销掉‘9fe6364285bd13f584b3a1779503e16057a418ce’的提交（注意，并不是回退到“9fe6364285bd13f584b3a1779503e16057a418ce”），
# -n, --no-commit       不要自动提交，故revert之后，需要重新commit
git revert -n 9fe6364285bd13f584b3a1779503e16057a418ce
git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit

看似达到的效果是一样的,其实完全不同.

第一:
上面我们说的如果你已经push到线上代码库, reset 删除指定commit以后,你git push可能导致一大堆冲突.但是revert 并不会.
第二:
如果在日后现有分支和历史分支需要合并的时候,reset 恢复部分的代码依然会出现在历史分支里.但是revert 方向提交的commit 并不会出现在历史分支里.

第三:
reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的.

//如果你写代码写错了之后想撤销的话，也就是还原文件初始状态
、git checkout --文件名
//如果你已经add了代码到缓存区
git reset HEAD 文件名
//但是如果你已经commit了，就需要版本回退了
git reset --hard 版本号
//要是你推送到了远程仓库，比如github

commit之后，pull了远程代码之后，想撤销本次的pull操作；
第一步：通过git log获取pull之前的版本号
gswyhq@gswyhq-pc:~/ambbr-ai/ambbr$ git log
commit 61d534e4a52dbf54b2ba137d7312c139e6399474
Author: gswyhq <gswyhq@126.com>
Date:   Fri Nov 25 14:02:30 2016 +0800

    debug initiative

commit 7a2ce91c4ec67e13fc440445b64db62e3328e12b
Merge: 9ba7af3 88b0eae
Author: gswyhq <gswyhq@126.com>
Date:   Thu Nov 24 16:53:36 2016 +0800

    Merge branch 'dev' of 172.26.1.167:ai/new-ambbr-ai into dev

第二步：回退到pull之前的版本
gswyhq@gswyhq-pc:~/ambbr-ai/ambbr$ git reset --hard 61d534e4a52dbf54b2ba137d7312c139e6399474
HEAD 现在位于 61d534e debug initiative

回退版本：
第一步查看历史记录
gswyhq@gswyhq-pc:~/hello-world$ git log
commit ac16836ae865ab521950e32470b774a601a78c34
Author: gswyhq <gswyhq@126.com>
Date:   Wed Feb 22 22:27:56 2017 +0800

    添加linux相关操作命令记录

commit d37e24978f952cdb5d8243af3ce2d2ec41223a2a
Author: gswyhq <gswyhq@126.com>
Date:   Fri Feb 17 21:46:27 2017 +0800

    添加.gitignore文件

commit 19a886f11500fa8a15be15dcb736f38aabb11f0f
Author: gswyhq <gswyhq@126.com>
Date:   Wed Jun 3 22:50:47 2015 +0800

    第二次更改

    添加了，print（“你好！”）

commit 3d2ab6bdb1fc0ef15fd3d2c85ee29587af7dcb80
Author: gswyhq <gswyhq@126.com>
Date:   Wed Jun 3 22:47:51 2015 +0800

    第一次更改

    第一次更改，什么都没有写。

第二步：回退到指定版本：
gswyhq@gswyhq-pc:~/hello-world$ git reset --hard 19a886f11500fa8a15be15dcb736f38aabb11f0f
HEAD 现在位于 19a886f 第二次更改

第三步：查看回退效果，发现回退到指定版本号之后的提交都没有了（这应该是跟撤销的最大区别吧）；
gswyhq@gswyhq-pc:~/hello-world$ git log
commit 19a886f11500fa8a15be15dcb736f38aabb11f0f
Author: gswyhq <gswyhq@126.com>
Date:   Wed Jun 3 22:50:47 2015 +0800

    第二次更改

    添加了，print（“你好！”）

commit 3d2ab6bdb1fc0ef15fd3d2c85ee29587af7dcb80
Author: gswyhq <gswyhq@126.com>
Date:   Wed Jun 3 22:47:51 2015 +0800

    第一次更改

    第一次更改，什么都没有写。
# 并且回退之后并没有显示要提交的东西，仅仅是比远程的落后了，故这个时候需要把本次回退提交（push）到远程，否则下次pull一下，本次回退就白忙活了；
# 但直接push会报错，因为本地版本落后于远程的版本，这个时候需要强制push，或者刚才删除远程的对应分支后再push。
gswyhq@gswyhq-pc:~/hello-world$ git status
位于分支 master
您的分支落后 'origin/master' 共 2 个提交，并且可以快进。
  （使用 "git pull" 来更新您的本地分支）


恢复 git reset -hard 的误操作
git的历史记录，你可以看到两次提交：
$ git log
* 98abc5a (HEAD, master) more stuff added to foo
* b7057a9 initial commit

现在让我们来重置回第一次提交的状态：
$ git reset --hard b7057a9
$ git log
* b7057a9 (HEAD, master) initial commit

这看起来我们是丢掉了我们第二次的提交，没有办法找回来了。但是 reflog 就是用来解决这个问题的。简单的说，它会记录所有HEAD的历史，也就是说当你做 reset，checkout等操作的时候，这些操作会被记录在reflog中。

$ git reflog
b7057a9 HEAD@{0}: reset: moving to b7057a9
98abc5a HEAD@{1}: commit: more stuff added to foo
b7057a9 HEAD@{2}: commit (initial): initial commit

所以，我们要找回我们第二commit，只需要做如下操作：
$ git reset --hard 98abc5a

再来看一下 git 记录：
$ git log
* 98abc5a (HEAD, master) more stuff added to foo
* b7057a9 initial commit

所以，如果你因为reset等操作丢失一个提交的时候，你总是可以把它找回来。除非你的操作已经被git当做垃圾处理掉了，一般是30天以后。

# 在git历史版本中查找某个文件（即查看某个文件是什么时候被删除的）：
gswyhq@gswyhq-pc:~$ git log -- flask_server.py
# 或者在历史记录中模糊查找某个文件:
gswyhq@gswyhq-pc:~$ git log --all -- "*flask*"


