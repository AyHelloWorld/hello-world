一、非集群

redis 数据库
安装服务端
sudo apt-get install redis-server
安装python包：
sudo pip install redis

也可以通过安装包安装：
    1、下载 gswyhq@gswyhq-pc:~$ wget http://download.redis.io/releases/redis-3.2.9.tar.gz
    2、解压 gswyhq@gswyhq-pc:~$ tar xzf redis-3.2.9.tar.gz
    3、移动到安装路径 gswyhq@gswyhq-pc:~$ sudo mv redis-3.2.9 /usr/local/redis-3.2.9
    4、安装 gswyhq@gswyhq-pc:/usr/local/redis-3.2.9$ make
    5、启动 gswyhq@gswyhq-pc:/usr/local/redis-3.2.9$ src/redis-server
    5、客户端操作 gswyhq@gswyhq-pc:/usr/local/redis-3.2.9$ src/redis-cli 
                  127.0.0.1:6379> set foo bar
                  OK
                  127.0.0.1:6379> get foo
                  "bar"
                  127.0.0.1:6379> exit


apt-get安装后的启动服务器：
gswyhq@gswyhq-pc:/usr/bin$ ./redis-server 
(#加上`&`号使redis以后台程序方式运行
./redis-server &)
或 
$redis-server /etc/redis/redis.conf  


二、集群搭建

gswyhq@gswyhq-pc:~$ mkdir redis_cluster
gswyhq@gswyhq-pc:~/redis_cluster$ mkdir 7000 7001 7002 7003 7004 7005
root@gswyhq-pc:/home/gswyhq/redis_cluster/7000# cp /etc/redis/redis.conf .
root@gswyhq-pc:/home/gswyhq/redis_cluster/7000# chown gswyhq:gswyhq redis.conf 
gswyhq@gswyhq-pc:~/redis_cluster/7000$ vim redis.conf 
修改下面的8行
46:pidfile /var/run/redis/redis-server.pid
50:port 6379
108:logfile /var/log/redis/redis-server.log
192:dir /var/lib/redis
637:# cluster-enabled yes
645:# cluster-config-file nodes-6379.conf
651:# cluster-node-timeout 15000
509:appendonly no
改成：
46:pidfile /home/gswyhq/redis_cluster/7000/redis-server.pid
50 port 7000
108:logfile /home/gswyhq/redis_cluster/7000/redis-server.log
192:dir /home/gswyhq/redis_cluster/7000
637:cluster-enabled yes
645:cluster-config-file /home/gswyhq/redis_cluster/7000/nodes.conf
651:cluster-node-timeout 15000
509:appendonly yes

其他的，类似，最后启动
gswyhq@gswyhq-pc:~$ redis-server /home/gswyhq/redis_cluster/7000/redis.conf 
gswyhq@gswyhq-pc:~$ redis-server /home/gswyhq/redis_cluster/7001/redis.conf 
gswyhq@gswyhq-pc:~$ redis-server /home/gswyhq/redis_cluster/7002/redis.conf 
gswyhq@gswyhq-pc:~$ redis-server /home/gswyhq/redis_cluster/7003/redis.conf 
gswyhq@gswyhq-pc:~$ redis-server /home/gswyhq/redis_cluster/7004/redis.conf 
gswyhq@gswyhq-pc:~$ redis-server /home/gswyhq/redis_cluster/7005/redis.conf 

结果：
gswyhq@gswyhq-pc:~$ ps -aux|grep redis
redis      629  0.0  0.0  44388  8044 ?        Ssl  08:44   0:03 /usr/bin/redis-server 127.0.0.1:6379
gswyhq    4846  0.0  0.0  40296  3856 ?        Ssl  10:33   0:00 redis-server 127.0.0.1:7000 [cluster]
gswyhq    4892  0.0  0.0  40296  3920 ?        Ssl  10:35   0:00 redis-server 127.0.0.1:7001 [cluster]
gswyhq    4935  0.0  0.0  40296  3840 ?        Ssl  10:38   0:00 redis-server 127.0.0.1:7002 [cluster]
gswyhq    5137  0.0  0.0  40296  3876 ?        Ssl  10:52   0:00 redis-server 127.0.0.1:7003 [cluster]
gswyhq    5166  0.0  0.0  40296  3820 ?        Ssl  10:54   0:00 redis-server 127.0.0.1:7004 [cluster]
gswyhq    5351  0.0  0.0  40296  3920 ?        Ssl  10:59   0:00 redis-server 127.0.0.1:7005 [cluster]
gswyhq    5436  0.0  0.0  14424  2156 pts/7    S+   11:03   0:00 grep redis

已经有了六个正在运行中的 Redis 实例， 接下来我们需要使用这些实例来创建集群。通过使用 Redis 集群命令行工具 redis-trib ， 编写节点配置文件的工作可以非常容易地完成： redis-trib 位于 Redis 源码的 src 文件夹中， 它是一个 Ruby 程序， 这个程序通过向实例发送特殊命令来完成创建新集群， 检查集群， 或者对集群进行重新分片（reshared）等工作。这里通过create命令来创建集群，指定replicas=1，即每一个主实例有一个从实例。
src下面的ruby脚本，建立集群： --replicas 1的意思是每个master有1个slave。
gswyhq@gswyhq-pc:~/redis_cluster$ cp /usr/share/doc/redis-tools/examples/redis-trib.rb .
gswyhq@gswyhq-pc:~/redis_cluster$ ls
7000  7001  7002  7003  7004  7005  redis-trib.rb
gswyhq@gswyhq-pc:~/redis_cluster$ redis-cli -c -p 7000
127.0.0.1:7000> CLUSTER MEET 172.0.0.1 7001
OK
127.0.0.1:7000> CLUSTER MEET 172.0.0.1 7002
OK
127.0.0.1:7000> CLUSTER MEET 172.0.0.1 7003
OK
127.0.0.1:7000> CLUSTER MEET 172.0.0.1 7004
OK
127.0.0.1:7000> CLUSTER MEET 172.0.0.1 7005
OK
127.0.0.1:7000> CLUSTER INFO
cluster_state:fail
cluster_slots_assigned:0
cluster_slots_ok:0
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:1
cluster_size:0
cluster_current_epoch:0
cluster_my_epoch:0
cluster_stats_messages_sent:0
cluster_stats_messages_received:0
127.0.0.1:7000> CLUSTER NODES
5f273413dffe418b482a68c06eb4d43a2de46c5e :7000 myself,master - 0 0 0 connected
127.0.0.1:7000> exit
gswyhq@gswyhq-pc:~/redis_cluster$ ./redis-trib.rb create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005
/usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require': cannot load such file -- redis (LoadError)
 from /usr/lib/ruby/2.3.0/rubygems/core_ext/kernel_require.rb:55:in `require'
 from ./redis-trib.rb:25:in `<main>'
报错，说明Ruby的redis接口没有安装，可以通过sudo gem install redis 进行安装
另外还需安装依赖
gswyhq@gswyhq-pc:~$ sudo apt-get install ruby gem
gswyhq@gswyhq-pc:~$ sudo apt-get install libssl-dev
gswyhq@gswyhq-pc:~$ sudo gem install redis

再运行：
gswyhq@gswyhq-pc:~/redis_cluster$ ./redis-trib.rb create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005
可能会询问是否保存设置
Can I set the above configuration? (type 'yes' to accept): 
回答yes

[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.

查看集群目前状况：
gswyhq@gswyhq-pc:~/redis_cluster$ redis-cli -c -p 7000
127.0.0.1:7000> CLUSTER INFO
cluster_state:ok
cluster_slots_assigned:16384
cluster_slots_ok:16384
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:6
cluster_size:3
cluster_current_epoch:6
cluster_my_epoch:1
cluster_stats_messages_sent:340
cluster_stats_messages_received:340
127.0.0.1:7000> 

redis图形化界面安装：
git clone --recursive https://github.com/uglide/RedisDesktopManager.git -b 0.8.0 rdm && cd ./rdm

# 通过ip及端口登陆
gow@gzidc:~$ redis-cli -h 10.20.200.57 -c -p 6383

# 登陆之后查看基本信息
10.20.200.57:6383> INFO

# 登陆之后，查看所有的key
10.20.200.57:6383> KEYS *
  1) "GOWILD_XPLAN_TCP18676374512"
  2) "203CMMAC_442c0576ed86"
  3) "GOWILD_XPLAN_TCP44:2c:05:75:f0:96"
  4) "203UINM_13632733426"
  5) "203UINM_13682556365"

# 查看某个key的值
10.20.200.57:6382> HVALS 203LSA_

redis_cluster_node = [{"host": "10.20.200.51","port":6381"},{"host": "10.20.200.51","port"::6382"},{"host": "10.20.200.52","port"::6381"},{"host": "10.20.200.52","port"::6382"},{"host": "10.20.200.53","port"::6381"},{"host": "10.20.200.53","port"::6382"}]

