
允许在指定的字段(fields)上添加一个或多个排序。每个排序也可以是反向的(reversed)。排序定义在每个字段水平(field level)上，用打分排序用特定的域名_score，用索引序号排序用_doc。
order选项可以有如下值：
asc：升序排列
desc：降序排列
在使用_score时默认使用降序，使用其它排序时默认为asc升序。

Elasticsearch支持用数组或多值字段排序。mode选项控制在排序文档时选取数组中的哪个值。mode选项能有如下值：
min：选取最小值
max：选取最大值
sum：使用数值的和作为排序值。只能用于基于数字的数组字段
avg：使用数值的均值作为排序值。同上
median：使用数值的中位数作为排序值。同上

{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "标准模板.keyword": "定义"
          }
        }
      ],
      "must_not": [],
      "should": []
    }
  },
  "from": 0,
  "size": 10,
  "sort": [
    {
      "timestamp": {
        "order": "asc"
      }
    },
    {
      "_score": {
        "order": "desc"
      }
    },
    {
      "_doc": {
        "order": "desc"
      }
    }
  ],
  "aggs": {}
}


缺失值(Missing Values)

missing变量指定了(specifies)缺失某个字段的文档应该如何处理(treated)：missing值会被设为_last,_first,或者自定义值（将会当做缺失值的文档的排序值）。例如：

{
    "sort" : [
        { "price" : {"missing" : "_last"} },
    ],
    "query" : {
        "term" : { "user" : "kimchy" }
    }
}

【注意】如果嵌套的内部对象不匹配nested_filter那么就会用缺失值

gswewf@gswewf-PC:~/yhb$ curl -X GET "localhost:9200/all_baoxian_*/_search" -u elastic:web12008 -H 'Content-Type: application/json' -d'
{
    "aggs" : {
        "intent" : {
            "terms" : {
                "field" : "intent",
                "order" : { "_count" : "asc" }
            }
        }
    }
}
'



假定的查询如下：
{
    "from": 0,
    "size": 0,
    "_source": {
        "includes": [
            "AVG"
        ],
        "excludes": []
    },
    "aggregations": {
        "newtype": {
            "terms": {
                "field": "newtype",
                "size": 200
            },
            "aggregations": {
                "AVG(num)": {
                    "avg": {
                        "field": "num"
                    }
                }
            }
        }
    }
}
其语义类似这个sql 语句：

SELECT avg(num) FROM twitter group by newtype
也就是按newtype 字段进行group by,然后对num求平均值。在我们实际的业务系统中，这种统计需求也是最多的。


gswewf@gswewf-PC:~/yhb$ curl -X GET "localhost:9200/all_baoxian_templates_question_alias/_search" -u elastic:web12008 -H 'Content-Type: application/json' -d'
{
    "aggs" : {
        "intent" : {
            "terms" : {
                "field" : "intent.keyword",
                "order" : { "_count" : "asc" },
                "size": 2
            }
        }
    }
}
'

# 按照字段‘必选实体’（是一个object, list）的长度进行升序排列：
curl -XPOST localhost:9200/all_baoxian_templates_question_alias/_search -u elastic:web12008 -H 'Content-Type: application/json' -d'
{
  "query": {
    "match_all": {}
  },
  "sort": {
    "_script": {
      "script": "doc['必选实体.keyword'].values.size()",
      "type": "number",
      "order": "asc"
    }
  }
}'

# 多级排序
# 先安装分数进行排序，再按照字段‘必选实体’（是一个object, list）的长度进行升序排列
curl -XPOST localhost:9200/all_baoxian_templates_question_alias/_search -u elastic:web12008 -H 'Content-Type: application/json' -d'
{
  "query": {
    "match_all": {}
  },
  "sort": [
    {
      "_score": {
        "order": "desc"
      }
    },
    {
      "_script": {
        "type": "number",
        "order": "asc",
        "script": "doc['必选实体.keyword'].values.size()"
      }
    }
  ]
}'

# 搜索结果忽略TF/IDF
{
  "sort": [
    {
      "_score": {
        "order": "desc"
      }
    },
    {
      "_script": {
        "type": "number",
        "order": "asc",
        "script": "doc['必选实体.keyword'].values.size()"
      }
    }
  ],
  "aggs": {},
  "query": {
    "bool": {
      "should": [
        {
          "constant_score": {
            "query": {
              "term": {
                "必选实体.keyword": "Fuwuxiangmu"
              }
            }
          }
        },
        {
          "constant_score": {
            "query": {
              "term": {
                "可选实体.keyword": "Fuwuxiangmu"
              }
            }
          }
        }
      ],
      "must": [
        {
          "constant_score": {
            "boost":   2 ,
            "query": {
              "term": {
                "标准模板.keyword": "定义"
              }
            }
          }
        }
      ],
      "must_not": []
    }
  },
  "size": 50,
  "from": 0
}


curl -XPOST localhost:9200/website/blog/1/_update?pretty -d '{
   "script" : {
       "inline": "ctx._source.tags.add(params.new_tag)",
       "params" : {
          "new_tag" : "tag2"
       }
   }
}'


# 按照intent字段的字符串长度进行降序排列
curl -XPOST localhost:9200/all_baoxian_templates_question_alias/_search -u elastic:web12008 -H 'Content-Type: application/json' -d'
{
  "query": {
    "match_all": {}
  },
  "sort": {
    "_script": {
      "script": "doc['intent.keyword'].value.length()",
      "type": "number",
      "order": "desc"
    }
  }
}'

To filter by length, I can use a script filter in a similar way:

POST /test_index/_search
{
   "query": {
      "filtered": {
         "query": {
            "match_all": {}
         },
         "filter": {
            "script": {
               "script": "doc['name'].value.length() > 3",
               "params": {}
            }
         }
      }
   },
   "sort": {
      "_script": {
         "script": "doc['name'].value.length()",
         "type": "number",
         "order": "asc"
      }
   }
}

P.S .:如果任何姓氏将包含空格，则可能需要在该字段上使用“index”：“not_analyze”。