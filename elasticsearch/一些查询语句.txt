
{
  "query": {
    "match": {
      "question": {
        "query": "怎么充值",
        "type": "phrase",
        "fuzziness": 2
      }
    }
  }
}

模糊查询：
{
  "query": {
    "fuzzy": {
      "question": {
        "value": "怎么充值",
        "boost": 1,
        "fuzziness": 2,
        "prefix_length": 0,
        "max_expansions": 5
      }
    }
  }
}

精确匹配：
{
  "query": {
    "match_phrase": {
      "question": "怎么充值"
    }
  }
}


{
  "query": {
    "bool": {
      "must": [
        {
          "query_string": {
            "default_field": "question",
            "query": "怎么充值"
          }
        }
      ],
      "must_not": [],
      "should": []
    }
  },
  "from": 0,
  "size": 10,
  "sort": [],
  "aggs": {}
}

{
  "query": {
    "match": {
      "question": "怎么充值"
    }
  },
  "size": 20
}

二次排序：
{
  "query": {
    "function_score": {
      "query": {
        "match": {
          "question": "怎么充值"
        }
      },
      "script_score": {
        "script": {
          "inline": "_score*Math.log(2 + 4)"
        }
      }
    }
  }
}

排序：
{
  "query": {
    "function_score": {
      "query": {
        "match": {
          "question": "怎么充值"
        }
      },
      "script_score": {
        "script": {
          "params": {
            "a": 5,
            "b": 1.2
          },
          "inline": "params.a / Math.pow(params.b, 2)+_score"
        }
      }
    }
  }
}

# 其中我们在做索引的时候，希望能将所有的句子切分的更详细，以便更好的搜索，所以ik_max_word更多的用在做索引的时候，但是在搜索的时候，对于用户所输入的query(查询)词，我们可能更希望得比较准确的结果，例如，我们搜索“无花果”的时候，更希望是作为一个词进行查询，而不是切分为"无"，“花”，“果”三个词进行结果的召回，因此ik_smart更加常用语对于输入词的分析。
比如新建索引时用的分词器是`ik_max_word`,在查询时候，可以指定分词器为`ik_smart`：
{
  "query": {
    "bool": {
      "must": [
        {
          "query_string": {
            "default_field": "question",
            "query": "你认为华兴的业绩如何",
            "analyzer": "ik_smart"
          }
        }
      ],
      "must_not": [],
      "should": []
    }
  },
  "from": 0,
  "size": 10,
  "sort": [],
  "aggs": {}
}

# long类型数据的查询：
{
  "query": {
    "constant_score": {
      "filter": {
        "term": {
          "price": 20
        }
      }
    }
  }
}

其他：
"aggs" : {
    "max_price": {
        "max": {
            "script": {
                "lang": "groovy",
                "inline": "_score"
            }
        }
    }
}
在Elasticsearch 5.x, 启动的时候会报下面的警告：
[WARN ][o.e.d.s.g.GroovyScriptEngineService] [groovy] scripts are deprecated, use [painless] scripts instead
正确用法是:
"aggs" : {
    "max_price": {
        "max": {
            "script": {
                "lang": "painless",
                "inline": "_score"
            }
        }
    }
}

{
  "query": {
    "function_score": {
      "query": {
        "match_phrase": {
          "question": "出单"
        }
      },
      "boost": "5",
      "random_score": {},  # 随机搜索，每次的结果并不一致
      "boost_mode": "multiply"
    }
  }
}