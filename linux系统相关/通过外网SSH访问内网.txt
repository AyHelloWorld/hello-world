
文
从外网 SSH 进局域网，反向代理+正向代理解决方案

局域网 反向代理 ssh  冰雪殿 2015年04月29日发布
推荐  4 推荐
收藏  41 收藏，17.3k 浏览
相信很多同学都会碰到这样一个问题。在实验室有一台机器用于日常工作，当我回家了或者回宿舍之后因为没法进入内网，所以访问不到了。如果这个时候我需要 SSH 进去做一下工作，那么怎么解决这个问题呢？本文将给出一种使用 SSH 的代理功能的解决方案。

问题描述：
机器状况
机器号	IP	用户名	备注
A	192.168.0.A	usr_a	目标服务器，在局域网中，可以访问 A
B	B.B.B.B	usr_b	代理服务器，在外网中，无法访问 A
C	-	-	可以直接访问 B，无法直接访问 A
目标
从 C 机器使用 SSH 访问 A

解决方案
在 A 机器上做到 B 机器的反向代理；在 B 机器上做正向代理本地端口转发

环境需求
每台机器上都需要 SSH 客户端
A、B 两台机器上需要 SSH 服务器端。通常是 openssh-server。
在 Ubuntu 上安装过程为
sudo apt-get install openssl-server
实施步骤
建立 A 机器到 B 机器的反向代理【A 机器上操作】
ssh -fCNR <port_b1>:localhost:22 usr_b@B.B.B.B
<port_b1> 为 B 机器上端口，用来与 A 机器上的22端口绑定。
建立 B 机器上的正向代理，用作本地转发。做这一步是因为绑定后的 端口只支持本地访问【B 机器上操作】
ssh -fCNL "*:<port_b2>:localhost:<port_b1>" localhost
<port_b2> 为本地转发端口，用以和外网通信，并将数据转发到 <port_b1>，实现可以从其他机器访问。
其中的*表示接受来自任意机器的访问。
现在在 C 机器上可以通过 B 机器 ssh 到 A 机器
ssh -p <portb2> usra@B.B.B.B
至此方案完成。

示例（将18007端口的访问转发到7770端口）：
ubuntu@ip-172-31-14-6:~$ ssh -fCNL "*:18007:localhost:7770" localhost

autossh -NfR 18100:192.168.3.103:18100 root@106.75.141.166
ssh -NfR 18100:192.168.3.103:18100 root@106.75.141.166
nohup ssh -NfR 18100:192.168.3.103:18100 root@106.75.141.166 &

当然也可以在docker容器中运行， 如：
root@1798fefb267f:/jiaoyin# nohup autossh -NR 18090:192.168.3.131:18090 ubuntu@54.223.152.240 &

# 有时候反向连接报错：
Warning: remote port forwarding failed for listen port 7770
这个时候，需要在被反向连接到的机器上，找到对应的进程kill掉即可；
ubuntu@ip-172-31-14-6:~/nlp_request_url$ sudo netstat -plant |grep 7770
tcp      184      0 localhost:7770          localhost:41106         CLOSE_WAIT  20273/sshd: ubuntu
ubuntu@ip-172-31-14-6:~/nlp_request_url$ kill -9 20273

附：

SSH 参数解释
-f 后台运行
-C 允许压缩数据
-N 不执行任何命令
-R 将端口绑定到远程服务器，反向代理
-L 将端口绑定到本地客户端，正向代理

# 有时候通过‘127.0.0.1’、‘localhost’能访问本地端口，却通过本机ip“10.13.101.154”不能访问；
这个时候需要配置一下nginx;
root@10-13-101-154:/etc/nginx# vim nginx.conf
在http下，添加一个：
   server{
    listen 8802;
        location / {
            proxy_pass_header Server;
            proxy_set_header Host $http_host;
            proxy_redirect off;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Scheme $scheme;
            proxy_pass http://127.0.0.1:18200/;
        }
    }
# 重新加载一下配置：
root@10-13-101-154:/etc/nginx# service nginx reload
# 另外若有防火墙，还得设置一下防火墙；
这样可以通过访问“10.13.101.154:8802",来间接访问：`10.13.101.154:18200` <==> `127.0.0.1:18200`
curl http://10.13.101.154:8802/ -d '{"question": "a卡在哪里能用", "uid": "123456"}'

# 反向代理出现以下错误：
zy@ubuntu:~/yhb$ ssh -i zy.pem -NfR 7770:192.168.3.101:80 ubuntu@52.80.62.217
zy@ubuntu:~/yhb$ Warning: remote port forwarding failed for listen port 7770
# 在代理机器上（ubuntu@52.80.62.217），查找占用的进程，kill掉即可：
ubuntu@ip-172-31-14-6:~/shanglishi$ sudo netstat -plant|grep 7770
tcp        0      0 127.0.0.1:7770          0.0.0.0:*               LISTEN      29810/sshd: ubuntu
tcp      175      0 127.0.0.1:7770          127.0.0.1:40773         CLOSE_WAIT  29810/sshd: ubuntu
tcp      175      0 127.0.0.1:7770          127.0.0.1:40772         CLOSE_WAIT  29810/sshd: ubuntu
tcp      175      0 127.0.0.1:7770          127.0.0.1:40771         CLOSE_WAIT  29810/sshd: ubuntu
tcp6       0      0 ::1:7770                :::*                    LISTEN      29810/sshd: ubuntu
ubuntu@ip-172-31-14-6:~/shanglishi$ kill -9 29810

如果SSH连接和应用的连接这两个连接的方向一致，那我们就说它是本地转发。
ssh -L <local port>:<remote host>:<remote port> <SSH hostname>

如果SSH连接和应用的连接这两个连接的方向不同，那我们就说它是远程转发。
ssh -R <local port>:<remote host>:<remote port> <SSH hostname>

另外本地转发命令中的 <remote host> 和 <SSH hostname> 可以是不同的主机。

ssh -i .zyg.pem -NfL  172.31.13.157:3307:ucloud.c1t9kbuexy3c.rds.cn-north-1.amazonaws.com.cn:3306 ubuntu@54.223.152.240

ubuntu@ip-172-31-14-6:~$ telnet ucloud.c1t9kbuexy3c.rds.cn-north-1.amazonaws.com.cn 3306
Trying 172.31.0.68...
Connected to ec2-52-80-141-61.cn-north-1.compute.amazonaws.com.cn.
Escape character is '^]'.
N
5.6.37-log'U7PlP-/B�A[)W^OR04V7Kmysql_native_password
Connection closed by foreign host.


# 本地端口转发（访问本地18474端口，就等同于访问7474端口）：
gswyhq@gswyhq-PC:~$ ssh -g -L 18474:localhost:7474 localhost
gswyhq@gswyhq-PC:~$ ssh-copy-id -i ~/.ssh/id_rsa.pub gswyhq@192.168.3.145
gswyhq@gswyhq-PC:~$ autossh -g -NL 18474:localhost:7474 localhost &

# 或者在192.168.3.145机器上执行：
gswyhq@gswyhq-PC:~$ nohup autossh -g -NL 18474:192.168.3.145:7474 192.168.3.145 &

-C：压缩数据传输。
-f ：后台认证用户/密码，通常和-N连用，不用登录到远程主机。
-N ：不执行脚本或命令，通常与-f连用。
-g ：在-L/-R/-D参数中，允许远程主机连接到建立的转发的端口，如果不加这个参数，只允许本地主机建立连接。
-L 本地端口:目标IP:目标端口

更多资料参考：http://blog.csdn.net/a351945755/article/details/21785647
